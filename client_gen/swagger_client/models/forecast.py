# coding: utf-8

"""
    home-iot-api

    The API for the EatBacon IOT project  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Forecast(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'pressure': 'float',
        'humidity': 'int',
        'wind_speed': 'float',
        'clouds': 'int',
        'temperature': 'ForecastTemperature',
        'weather': 'WeatherForecast'
    }

    attribute_map = {
        '_date': 'date',
        'pressure': 'pressure',
        'humidity': 'humidity',
        'wind_speed': 'windSpeed',
        'clouds': 'clouds',
        'temperature': 'temperature',
        'weather': 'weather'
    }

    def __init__(self, _date=None, pressure=None, humidity=None, wind_speed=None, clouds=None, temperature=None, weather=None):  # noqa: E501
        """Forecast - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._pressure = None
        self._humidity = None
        self._wind_speed = None
        self._clouds = None
        self._temperature = None
        self._weather = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if pressure is not None:
            self.pressure = pressure
        if humidity is not None:
            self.humidity = humidity
        if wind_speed is not None:
            self.wind_speed = wind_speed
        if clouds is not None:
            self.clouds = clouds
        if temperature is not None:
            self.temperature = temperature
        if weather is not None:
            self.weather = weather

    @property
    def _date(self):
        """Gets the _date of this Forecast.  # noqa: E501


        :return: The _date of this Forecast.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Forecast.


        :param _date: The _date of this Forecast.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def pressure(self):
        """Gets the pressure of this Forecast.  # noqa: E501


        :return: The pressure of this Forecast.  # noqa: E501
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this Forecast.


        :param pressure: The pressure of this Forecast.  # noqa: E501
        :type: float
        """

        self._pressure = pressure

    @property
    def humidity(self):
        """Gets the humidity of this Forecast.  # noqa: E501


        :return: The humidity of this Forecast.  # noqa: E501
        :rtype: int
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this Forecast.


        :param humidity: The humidity of this Forecast.  # noqa: E501
        :type: int
        """

        self._humidity = humidity

    @property
    def wind_speed(self):
        """Gets the wind_speed of this Forecast.  # noqa: E501


        :return: The wind_speed of this Forecast.  # noqa: E501
        :rtype: float
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this Forecast.


        :param wind_speed: The wind_speed of this Forecast.  # noqa: E501
        :type: float
        """

        self._wind_speed = wind_speed

    @property
    def clouds(self):
        """Gets the clouds of this Forecast.  # noqa: E501


        :return: The clouds of this Forecast.  # noqa: E501
        :rtype: int
        """
        return self._clouds

    @clouds.setter
    def clouds(self, clouds):
        """Sets the clouds of this Forecast.


        :param clouds: The clouds of this Forecast.  # noqa: E501
        :type: int
        """

        self._clouds = clouds

    @property
    def temperature(self):
        """Gets the temperature of this Forecast.  # noqa: E501


        :return: The temperature of this Forecast.  # noqa: E501
        :rtype: ForecastTemperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this Forecast.


        :param temperature: The temperature of this Forecast.  # noqa: E501
        :type: ForecastTemperature
        """

        self._temperature = temperature

    @property
    def weather(self):
        """Gets the weather of this Forecast.  # noqa: E501


        :return: The weather of this Forecast.  # noqa: E501
        :rtype: WeatherForecast
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this Forecast.


        :param weather: The weather of this Forecast.  # noqa: E501
        :type: WeatherForecast
        """

        self._weather = weather

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Forecast, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Forecast):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
