# coding: utf-8

"""
    home-iot-api

    The API for the EatBacon IOT project  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LightingZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'device_id': 'int',
        'device_type': 'str',
        'zone': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'device_id': 'deviceId',
        'device_type': 'deviceType',
        'zone': 'zone'
    }

    def __init__(self, id=None, name=None, device_id=None, device_type=None, zone=None):  # noqa: E501
        """LightingZone - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._device_id = None
        self._device_type = None
        self._zone = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if device_id is not None:
            self.device_id = device_id
        if device_type is not None:
            self.device_type = device_type
        if zone is not None:
            self.zone = zone

    @property
    def id(self):
        """Gets the id of this LightingZone.  # noqa: E501


        :return: The id of this LightingZone.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LightingZone.


        :param id: The id of this LightingZone.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LightingZone.  # noqa: E501


        :return: The name of this LightingZone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LightingZone.


        :param name: The name of this LightingZone.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def device_id(self):
        """Gets the device_id of this LightingZone.  # noqa: E501


        :return: The device_id of this LightingZone.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this LightingZone.


        :param device_id: The device_id of this LightingZone.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def device_type(self):
        """Gets the device_type of this LightingZone.  # noqa: E501


        :return: The device_type of this LightingZone.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this LightingZone.


        :param device_type: The device_type of this LightingZone.  # noqa: E501
        :type: str
        """
        allowed_values = ["dimmer", "switch"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def zone(self):
        """Gets the zone of this LightingZone.  # noqa: E501


        :return: The zone of this LightingZone.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this LightingZone.


        :param zone: The zone of this LightingZone.  # noqa: E501
        :type: str
        """

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LightingZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LightingZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
